[[plugins]]
repo = 'Shougo/dein.vim'

# ------------------------------------
# colorscheme tender setting
# ------------------------------------
# [[plugins]]
# repo = 'jacoborus/tender.vim'
# hook_add = '''
# 	colorscheme tender
# 	set background=dark
# 	syntax on
# 	set t_Co=256
# 	let $NVIM_TUI_ENABLE_TRUE_COLOR=1
# '''


# [[plugins]]
# repo = 'joshdick/onedark.vim'
# hook_add = '''
# 	colorscheme onedark
# '''

[[plugins]]
repo = 'tomasr/molokai'
hook_add = '''
	set background=dark
	colorscheme molokai
	set t_Co=256
	let g:molokai_original = 1
'''

# [[plugins]]
# repo = 'Townk/vim-autoclose'

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
	let g:NERDTreeWinSize = 20
	nnoremap <C-e> :NERDTreeToggle<CR>
'''
# autocmd vimenter * if !argc() | NERDTree | endif

#[plugins]]
# repo = 'sheerun/vim-polyglot'

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'

[[plugins]]
repo = 'vim-airline/vim-airline'
hook_add = '''
	let g:airline#extensions#tabline#enabled = 1
	let g:airline#extensions#tabline#show_buffers = 0
	let g:airline#extensions#tabline#tab_nr_type = 1
	let g:airline#extensions#ale#enabled = 1
	let g:airline_inactive_collapse = 0
	let g:airline#extensions#tagbar#enabled = 1
	let g:airline#extensions#virtualenv#enabled = 1
'''


[[plugins]]
repo = 'scrooloose/syntastic'
hook_add = '''
	set statusline+=%#warningmsg#
	set statusline+=%{SyntasticStatuslineFlag()}
	set statusline+=%*
	
	let g:syntastic_always_populate_loc_list = 1
	let g:syntastic_auto_loc_list = 1
	let g:syntastic_check_on_open = 1
	let g:syntastic_check_on_wq = 0
'''

[[plugins]]
repo = 'tpope/vim-commentary'

[[plugins]]
repo = 'Shougo/deoplete.nvim'
on_event = 'InsertCharPre'
hook_add = '''
	let g:deoplete#enable_at_startup = 1
	let g:deoplete#sources#clang#libclang_path = '/Library/Developer/CommandLineTools/usr/lib/libclang.dylib'
	let g:deoplete#sources#clang#clang_header = '/Library/Developer/CommandLineTools/usr/lib/clang'
	imap <expr><C-j> pumvisible() ? "<C-n>" : neosnippet#jumpable() ? "<Plug>(neosnippet_expand_or_jump)" : "<C-j>"
	imap <expr><C-k> pumvisible() ? "<C-p>" : neosnippet#jumpable() ? "<Plug>(neosnippet_expand_or_jump)" : "<C-k>"
	imap <expr><CR> neosnippet#expandable() ? "<Plug>(neosnippet_expand_or_jump)" : pumvisible() ? "<C-y>" : "<CR>"
 	set completeopt=menu
'''
on_i = 1
# hook_add = '''
# 	let g:deoplete#enable_at_startup = 1
# 	let g:deoplete#sources#clang#libclang_path = '/Library/Developer/CommandLineTools/usr/lib/libclang.dylib'
# 	let g:deoplete#sources#clang#clang_header = '/Library/Developer/CommandLineTools/usr/lib/clang'
# 	# imap <expr><TAB> pumvisible() ? "<C-n>" : neosnippet#jumpable() ? "<Plug>(neosnippet_expand_or_jump)" : "<TAB>"
# 	imap <expr><CR> neosnippet#expandable() ? "<Plug>(neosnippet_expand_or_jump)" : pumvisible() ? "<C-y>" : "<CR>"
# 	set completeopt=menu
# '''
	# inoremap <expr><tab> pumvisible() ? "<C-n>" :
	# 	\ neosnippet#expandable_or_jumpable() ?
	# 	\    "<Plug>(neosnippet_expand_or_jump)" : "\<tab>"
	# imap <expr><C-j> pumvisible() ? "<C-n>" : neosnippet#jumpable() ? "<Plug>(neosnippet_expand_or_jump)" : "<C-j>"
	# imap <expr><C-k> pumvisible() ? "<C-p>" : neosnippet#jumpable() ? "<Plug>(neosnippet_expand_or_jump)" : "<C-k>"

[[plugins]]
repo = 'zchee/deoplete-clang'


[[plugins]]
repo = 'Shougo/neosnippet'
hook_add = '''
" Plugin key-mappings.
" Note: It must be "imap" and "smap".  It uses <Plug> mappings.
 	imap <C-l>  <Plug>(neosnippet_expand_or_jump)
 	smap <C-l>  <Plug>(neosnippet_expand_or_jump)
 	xmap <C-l>  <Plug>(neosnippet_expand_target)

	" For conceal markers.
	if has('conceal')
	  set conceallevel=2 concealcursor=niv
	let g:neosnippet#snippets_directory = '$HOME/dotfiles/.vim/snippets/'
	endif
'''
on_i = 1
on_ft = ['snippet']
depends = ['neosnippet-snippets']

	# let g:neosnippet#snippets_directory = '$HOME/.vim/snippets/'
	# let g:neosnippet#disable_runtime_snippets  =  { 'c' : 1,  'cpp' : 1 }

# hook_add = '''
# " Plugin key-mappings.
# " Note: It must be "imap" and "smap".  It uses <Plug> mappings.
# 	imap <C-k>  <Plug>(neosnippet_expand_or_jump)
# 	smap <C-k>  <Plug>(neosnippet_expand_or_jump)
# 	xmap <C-k>  <Plug>(neosnippet_expand_target)

# 	" SuperTab like snippets behavior.
# 	" Note: It must be "imap" and "smap".  It uses <Plug> mappings.
# 	"imap <expr><TAB>
# 	" \ pumvisible() ? "\<C-n>" :
# 	" \ neosnippet#expandable_or_jumpable() ?
# 	" \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
# 	smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
# 	\ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

# 	" For conceal markers.
# 	if has('conceal')
# 	  set conceallevel=2 concealcursor=niv
# 	let g:neosnippet#snippets_directory = '$HOME/.vim/snippets/'
# 	endif
# '''


[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'airblade/vim-gitgutter'

[[plugins]]
repo = 'yuttie/comfortable-motion.vim'

[[plugins]]
repo = 'terryma/vim-expand-region'
hook_add = '''
	vmap v <Plug>(expand_region_expand)
	vmap <C-v> <Plug>(expand_region_shrink)
'''

[[plugins]]
repo = 'pbondoer/vim-42header'
hook_add = '''
	nnoremap <C-h>e :Stdheader<CR>
'''

[[plugins]]
repo = 'drmikehenry/vim-headerguard'
hook_add = '''
	nnoremap <C-h>d :Headerguard<CR>
'''

[[plugins]]
repo = 'skanehira/translate.vim'

[[plugins]]
repo = 'easymotion/vim-easymotion'
hook_add = '''
	nmap s <Plug>(easymotion-s2)
'''

[[plugins]]
repo = 'kana/vim-smartchr'
hook_add = '''
	autocmd Filetype c,cpp	inoremap <expr> = smartchr#loop(' = ', ' == ', ' != ', '=')
	autocmd Filetype c		inoremap <expr> < smartchr#loop(' < ', ' <= ', '<')
	autocmd Filetype cpp	inoremap <expr> < smartchr#loop(' < ', ' << ', ' <= ', '<')
	autocmd Filetype c		inoremap <expr> > smartchr#loop(' > ', ' >= ', '>')
	autocmd Filetype cpp	inoremap <expr> > smartchr#loop(' > ', ' >> ', ' >= ', '>')
	autocmd Filetype c,cpp	inoremap <expr> , smartchr#loop(', ', ',')
	autocmd Filetype c,cpp	inoremap <expr> & smartchr#loop('&', ' && ')
	autocmd Filetype c,cpp	inoremap <expr> . smartchr#loop('.', '->')
	autocmd Filetype c,cpp	inoremap <expr> / smartchr#loop('/', '../', '../../', '../../../')
	autocmd Filetype cpp	inoremap <expr> : smartchr#loop('::', ':')
'''

# [[plugins]]
# repo = 'jeetsukumaran/vim-buffergator'

# [[plugins]]
# repo = 'junegunn/fzf'
# build_on = '''
# ./install -all
# '''

[[plugins]]
repo = 'junegunn/fzf.vim'
hook_add = '''
	set rtp+=~/.brew/opt/fzf
'''

[[plugins]]
repo = 'mattn/vim-sonictemplate'
hook_add = '''
	let g:sonictemplate_vim_template_dir = [
		\ '~/.vim/template'
		\]
'''

[[plugins]]
repo = 'lighttiger2505/gtags.vim'
