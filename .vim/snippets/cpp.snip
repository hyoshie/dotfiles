# snippet     class
# options     head
# abbr        class {}
#     class ${1:#:name} {
#         ${2}
#     public:
#         $1(${3});
#     };
#     $1::$1($3) {
#         ${0:target}
#     }

snippet     cout
abbr        std::cout << << std::endl;
    std::cout << ${1} << std::endl;

snippet     uname
alias       un
abbr        using namespace
    using namespace ${1:std};${0}

snippet     cpmain
alias       cpm
abbr        simple set
    #include <iostream>
    #include <iomanip>
    #include <mymacro>
    using namespace std;

    int main(void)
    {
        ${0:TARGET}
    }

snippet     header with canonical form
alias       canh
abbr        orthodox canonical form header
    class ${1:CLASS_NAME}
    {
        private:
                ${0}
        public:
            $1();
            ~$1();
            $1(const $1& other);
            $1& operator=(const $1& other);
    };

snippet     source with canonical form
alias       cans
abbr        orthodox canonical form source
 #include "${1:CLASS_NAME}.hpp"

    $1::$1()
    {
    }

    $1::~$1()
    {
    }

    $1::$1(const $1& other)
    {
        *this = other;
    }

    $1& $1::operator=(const $1& other)
    {
        if (this != &other) {
        }
        return *this;
    }

snippet     filename
alias       fname
    `expand("%:r")`

snippet     std::cout
alias       co
    std::cout

snippet     std::endl
alias       en
    std::endl

snippet     testheader
alias       th
    std::cout    <<    "-----TEST ${1:CONTENT}-----"    <<    std::endl;${0}

snippet     std::string
alias       str
    std::endl

