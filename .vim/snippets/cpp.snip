# snippet     class
# options     head
# abbr        class {}
#     class ${1:#:name} {
#         ${2}
#     public:
#         $1(${3});
#     };
#     $1::$1($3) {
#         ${0:target}
#     }

snippet     uname
alias       un
abbr        using namespace
    using namespace ${1:std};${0}

snippet     cpmain
alias       cpm
abbr        simple set
    #include <iostream>
    ${1:TARGET}

    ${0}

    int main() {
        ;
        ;
    }

snippet     header with canonical form
alias       canh
abbr        orthodox canonical form header
    class ${1:CLASS_NAME} {
        public:
            $1();
            ~$1();
            $1(const $1& other);
            $1& operator=(const $1& other);
        private:
                ${0}
    };

snippet     source with canonical form
alias       cans
abbr        orthodox canonical form source
 #include "${1:CLASS_NAME}.hpp"

    $1::$1() {
    }

    $1::~$1() {
    }

    $1::$1(const $1& other) {
        *this = other;
    }

    $1& $1::operator=(const $1& other) {
        if (this != &other) {
        }
        return *this;
    }

snippet     filename
alias       fname
    `expand("%")`

snippet     o_new_line
alias       coen
abbr        std::cout << std::endl;
    std::cout << std::endl;

snippet     o_new_line2
alias       coen2
abbr        std::cout << std::endl << std::endl;
    std::cout << std::endl << std::endl;

snippet     std::cin
alias       cin
    std::cin   >>

snippet     std::cout
alias       co
    std::cout   <<  

snippet     std::out
alias       out
    std::cout   <<  ${0}  <<  std::endl;

snippet     std::out_c
alias       cout
    std::cout   <<  ${0}  <<  std::endl;

snippet     std::out_space
alias       cos
    std::cout   <<  ${0}  <<  " ";


snippet     std_flush
alias       flush
    std::cout   <<  ${0}  <<  std::flush;


snippet     std::endl
alias       en
    std::endl

snippet     testheader
alias       th
    std::cout    <<    "-----TEST ${1:CONTENT}-----"    <<    std::endl;${0}

snippet     my_getterc
alias       mygetc
    const ${2}    ${1}::get${0}${3}() const {
        return _$3;
    }

snippet     my_setterc
alias       mysetc
    void    ${1}::set${0}${3}(const ${2} $3) {
        this._$3 = $3;
    }

snippet     my_getterh
alias       mygeth
    const ${1}    get${0}${2}() const;

snippet     my_setterh
alias       myseth
    void    set${0}${2}(const ${1} $2);


snippet     my_accesserc
alias       myacc
    const ${2}    ${1}::get${0}${3}() const {
        return _$3;
    }

    void    ${1}::set${0}${3}(const ${2} $3) {
        this._$3 = $3;
    }

snippet     my_accesserh
alias       myach
    const ${1}    get${0}${2}() const;
    void    set${0}${2}(const ${1} $2);

# snippet     string class
# alias       str
#     std::string

# snippet     string class(const)
# alias       strc
#     const std::string

snippet     typedef string class
alias       typestr
    typedef std::string Str;

snippet     castcpp
alias       cast
    <${0}>

snippet     static_cast
alias       stcast
   static_cast<${1}>(${2})

snippet     reinterpret_cast
alias       recast

   reinterpret_cast<${1}>(${2})

snippet     dynamic_cast
alias       dycast
   dynamic_cast<${1}>(${2})

snippet     std::vector
alias       vec
   std::vector<${1}>    ${2};${0}


snippet     if_1line
alias       if1
    if (${1:Condition})
        ${2:Process}

snippet     try_convenient
alias       tryc
    try {
        ${1:Action}
    } catch (const std::exception& e) {
        std::cout   << e.what() <<  std::endl;
    }


snippet     test_function
alias       test
    void    test${1:Item}(const std::string &msg) {
        std::cout << msg << std::endl;
        ${0}
    }

snippet     passp
    std::cerr << "[\x1b[32mPASS\x1b[39m]"<<std::endl;
